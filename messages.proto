// Classes
message KeyValuePair {
    optional string key = 1;
    optional string value = 2;
}

message PlayerInsightState {
    optional int32 playersOnline = 1;
    repeated KeyValuePair segments = 2;
}

message ServerEndpoint {
    optional string address = 1;
    optional int32 port = 2;
}

// SimpleConnect
message SimpleConnectArgs {
    optional string gameId = 1;
    optional string usernameOrEmail = 2;
    optional string password = 3;
    repeated string playerInsightSegments = 4;
    optional string clientAPI = 5;
    repeated KeyValuePair clientInfo = 6;
}

message SimpleConnectOutput {
    optional string token = 1;
    optional string userId = 2;
    optional bool showBranding = 3;
    optional string gameFSRedirectMap = 4;
    optional string partnerId = 5;
}

// SimpleRegister
message SimpleRegisterArgs {
    optional string gameId = 1;
    optional string username = 2;
    optional string password = 3;
    optional string email = 4;
    repeated KeyValuePair extraData = 5;
    optional string captchaKey = 6;
    optional string captchaValue = 7;
    optional string partnerId = 8;
    repeated string playerInsightSegments = 9;
    optional string clientAPI = 10;
    repeated KeyValuePair clientInfo = 11;
}

message SimpleRegisterOutput {
    optional string token = 1;
    optional string userId = 2;
    optional bool showBranding = 3;
    optional string gameFSRedirectMap = 4;
    optional string partnerId = 5;
    optional PlayerInsightState playerInsightState = 6;
}

message SimpleRegisterError {
    optional int32 errorCode = 1;
    optional string message = 2;
    optional string usernameError = 3;
    optional string passwordError = 4;
    optional string emailError = 5;
    optional string captchaError = 6;
}

// CreateRoom
message CreateRoomArgs {
    optional string roomId = 1;
    optional string roomType = 2;
    optional bool visible = 3;
    repeated KeyValuePair roomData = 4;
    optional bool isDevRoom = 5;
}

message CreateRoomOutput {
    optional string roomId = 1;
}

// JoinRoom
message JoinRoomArgs {
    optional string roomId = 1;
    repeated KeyValuePair joinData = 2;
    optional bool isDevRoom = 3;
}

message JoinRoomOutput {
    optional string joinKey = 1;
    repeated ServerEndpoint endpoints = 2;
}

// CreateJoinRoom
message CreateJoinRoomArgs {
    optional string roomId = 1;
    optional string roomType = 2;
    optional bool visible = 3;
    repeated KeyValuePair roomData = 4;
    repeated KeyValuePair joinData = 5;
    optional bool isDevRoom = 6;
}

message CreateJoinRoomOutput {
    optional string roomId = 1;
    optional string joinKey = 2;
    repeated ServerEndpoint endpoints = 3;
}

// BigDB

enum valueType {
    STRING = 0;
    INT = 1;
    UINT = 2;
    LONG = 3;
    BOOL = 4;
    FLOAT = 5;
    DOUBLe = 6;
    BYTEARRAY = 7;
    ARRAY = 9;
    OBJ = 10;
}

message ValueObject {
    enum valueType {
        STRING = 0;
        INT = 1;
        UINT = 2;
        LONG = 3;
        BOOL = 4;
        FLOAT = 5;
        DOUBLe = 6;
        BYTEARRAY = 7;
        ARRAY = 9;
        OBJ = 10;
    }
    optional string string = 2;
    optional int32 int32 = 3;
    optional uint32 uInt = 4;
    optional int64 long = 5;
    optional bool bool = 6;
    optional float float = 7;
    optional double double = 8;
    optional bytes byteArray = 9;
    optional int64 dateTime = 10;
    repeated ArrayProperty arrayProperties = 11;
    repeated ObjectProperty objectProperties = 12;
}

message ObjectProperty {
    optional string name = 1;
    optional ValueObject value = 2;
}

message ArrayProperty {
    optional int32 index = 1;
    optional ValueObject value = 2;
}

message BigDBObject {
    optional string key = 1;
    optional string version = 2;
    repeated ObjectProperty properties = 3;
    optional uint32 creator = 4;
}

message LoadMyPlayerObjectArgs {

}

message LoadMyPlayerObjectOutput {
    optional BigDBObject playerObject = 1;
}

// PlayerInsight
//message PlayerInsightState {
//  optional int32 playersOnline = 1;
//  repeated KeyValuePair segments = 2;
//}

// Generic exception
message PlayerIOError {
    optional int32 errorCode = 1;
    optional string message = 2;
}
